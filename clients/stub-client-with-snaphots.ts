type AsyncFn<T extends unknown[], U> = (...args: T) => Promise<U>;

/**
 * Stub a client when we are in E2E test context.
 *
 * We want to test the whole application, but we don't want to call the real API,
 * because it would be slow and unreliable.
 *
 * Instead, we want to call a stubbed version of the client function,
 * based on a JSON file generated by snapshot tests.
 *
 * @param client: an object with a uniq key containing the client function
 * @returns a stubbed client function
 */
export default function stubClientWithSnapshots<
  Name extends string,
  Args extends unknown[],
  R
>(arg: Record<Name, AsyncFn<Args, R>>): AsyncFn<Args, R> {
  const clientName = Object.keys(arg)[0] as Name;
  const client = arg[clientName];

  // If mocking is not enabled, return the real client
  if (process.env.NEXT_PUBLIC_END2END_MOCKING !== 'enabled') {
    return client;
  }

  const asyncSnapshots = loadSnapshots(clientName);

  return async function (...args: Args) {
    const snaphots = await asyncSnapshots;
    const simplifyParams = await loadSimplifyParams(clientName);
    const stub = snaphots.find((stub: any) => {
      return (
        JSON.stringify(simplifyParams(...args)) === JSON.stringify(stub.args)
      );
    });

    if (!stub) {
      try {
        const response = await client(...args);

        if (process.env.NODE_ENV !== 'production') {
          // The warning is displayed only if no error
          // is thrown by the client (as we cannot stub error for now)
          console.warn(
            `
  E2E Client Stub Warning
  -----------------------
  When calling client : ${clientName}
  No snaphots found for args : 
    ${JSON.stringify(simplifyParams(...args), null, 2).replaceAll(
      '\n',
      '\n    '
    )}
      
  Calling the real client instead.
    `
          );
        }
        return response;
      } finally {
      }
    }
    return stub['result'] as R;
  };
}

async function loadSimplifyParams(clientName: string) {
  try {
    const simplifyParamsPath = await import(
      `#clients/_test/${clientName}/simplify-params.ts`
    );

    if (!simplifyParamsPath.default) {
      throw new Error(
        `No default export found for 'simplify-params.ts' of ${clientName}`
      );
    }
    return simplifyParamsPath.default;
  } catch (e) {
    return (...args: any[]) => args;
  }
}

// Load all snapshots .json files in the folder /_test/<clientName>/_snapshots/*.json
// using require.context webpack feature
async function loadSnapshots(clientName: string) {
  const snapshotContext = require.context(
    `#clients/_test/`,
    true,
    /\.json$/,
    'lazy'
  );
  const snapshots = await Promise.all(
    snapshotContext
      .keys()
      .filter((fileName: string) =>
        fileName.includes(`/${clientName}/_snapshots/`)
      )
      .map((fileName: string) => {
        const snapshot = snapshotContext(fileName);
        return snapshot;
      })
  );

  if (snapshots.length === 0) {
    console.warn(
      `
  E2E Client Stub Warning
  -----------------------
  No snapshots found for client ${clientName}.
  Please create a snapshot file in clients/_test/${clientName}/_snapshots/
`
    );
  }
  return snapshots;
}

export { stubClientWithSnapshots as stubClient };
