import { existsSync, readdirSync } from 'fs';
import { readFile } from 'fs/promises';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

type AsyncFn<T extends unknown[], U> = (...args: T) => Promise<U>;

/**
 * Stub a client when we are in E2E test context.
 *
 * We want to test the whole application, but we don't want to call the real API,
 * because it would be slow and unreliable.
 *
 * Instead, we want to call a stubbed version of the client function,
 * based on a JSON file generated by snapshot tests.
 *
 * @param client: an object with a uniq key containing the client function
 * @returns a stubbed client function
 */
export default function stubClientWithSnapshots<
  Name extends string,
  Args extends unknown[],
  R
>(arg: Record<Name, AsyncFn<Args, R>>): AsyncFn<Args, R> {
  const clientName = Object.keys(arg)[0] as Name;
  const client = arg[clientName];

  // If mocking is not enabled, return the real client
  if (process.env.END2END_MOCKING !== 'enabled') {
    return client;
  }

  const snaphotPath = join(
    dirname(fileURLToPath(import.meta.url)),
    '_test',
    clientName,
    '_snapshots'
  );

  if (!existsSync(snaphotPath)) {
    throw new Error('No test folder found for client : ' + clientName);
  }
  // List all JSON files in path
  const snaphotFiles = readdirSync(snaphotPath).filter((file: string) =>
    file.match(/.*.json/)
  );

  const asyncSnaphots = Promise.all(
    snaphotFiles.map(async (path: string) => {
      const file = await readFile(join(snaphotPath, path), 'utf-8');
      return JSON.parse(file);
    })
  );

  return async function (...args: Args) {
    const snaphots = await asyncSnaphots;
    const simplifyParams = await loadSimplifyParams(clientName);
    const stub = snaphots.find((stub: any) => {
      return (
        JSON.stringify(simplifyParams(...args)) === JSON.stringify(stub.args)
      );
    });

    if (!stub) {
      try {
        const response = await client(...args);

        // The warning is displayed only if no error
        // is thrown by the client (as we cannot stub error for now)
        console.warn(
          `
  E2E Client Stub Warning
  -----------------------
  When calling client : ${clientName}
  No snaphots found for args : 
    ${JSON.stringify(simplifyParams(...args), null, 2).replaceAll(
      '\n',
      '\n    '
    )}
      
  Calling the real client instead.
    `
        );
        return response;
      } finally {
      }
    }
    return stub['result'] as R;
  };
}

async function loadSimplifyParams(clientName: string) {
  try {
    const simplifyParamsPath = await import(
      `./_test/${clientName}/simplify-params.ts`
    );

    if (!simplifyParamsPath.default) {
      throw new Error(
        `No default export found for 'simplify-params.ts' of ${clientName}`
      );
    }
    return simplifyParamsPath.default;
  } catch (e) {
    return (...args: any[]) => args;
  }
}

export { stubClientWithSnapshots as stubClient };
