import { existsSync, readdirSync } from 'fs';
import { readFile } from 'fs/promises';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

/**
 * Stub a client function
 * @param fileUrl: path of the file that contains the client function
 * @returns
 */

const STUB_FOLDER = '_test';

type IParams<T extends unknown[], U> = {
  client: (...args: T) => Promise<U>;
  fileUrl: string;
  simplifyParams?: (...args: T) => any;
};

/**
 * Stub a client when we are in E2E test context.
 *
 * We want to test the whole application, but we don't want to call the real API,
 * because it would be slow and unreliable.
 *
 * Instead, we want to call a stubbed version of the client function,
 * based on a JSON file generated by snapshot tests.
 *
 * @param client: the client function to stub
 * @param fileUrl: the path of the file that contains the client function
 * @param simplifyParams: a function that simplifies the params to compare them
 * @returns a stubbed client function
 */

export default function stubClient<T extends unknown[], U>({
  client,
  fileUrl,
  simplifyParams = (...args: T) => args,
}: IParams<T, U>): (...args: T) => Promise<U> {
  // If mocking is not enabled, return the real client
  if (process.env.END2END_MOCKING !== 'enabled') {
    return client;
  }

  const stubPath = join(dirname(fileURLToPath(fileUrl)), STUB_FOLDER);
  if (!existsSync(stubPath)) {
    throw new Error(
      STUB_FOLDER + ' folder not found for file : \n\t' + fileUrl + '\n'
    );
  }
  // List all JSON files in path
  const stubFiles = readdirSync(stubPath).filter((file: string) =>
    file.match(/.*.json/)
  );

  const asyncStubs = Promise.all(
    stubFiles.map(async (path: string) => {
      const file = await readFile(join(stubPath, path), 'utf-8');
      return JSON.parse(file);
    })
  );

  return async function (...args: T) {
    const stubs = await asyncStubs;
    const stub = stubs.find((stub: any) => {
      return (
        JSON.stringify(simplifyParams(...args)) === JSON.stringify(stub.args)
      );
    });

    if (!stub) {
      try {
        const response = client(...args);

        // The warning is displayed only if no error
        // is thrown by the client (as we cannot stub error for now)
        console.warn(
          `
  E2E Mocking Warning
  -------------------
  When calling client : ${fileUrl}
  No stub found for args : 
    ${JSON.stringify(simplifyParams(...args), null, 2).replaceAll(
      '\n',
      '\n    '
    )}
      
  Calling the real client instead.
    `
        );
        return response;
      } finally {
      }
    }
    return stub['result'] as U;
  };
}

export { stubClient };
