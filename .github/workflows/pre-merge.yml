# This workflow will do a clean install of node dependencies, build the source code and run tests

name: 'Pre-merge checks'

on:
  pull_request:
    branches: [main]

# Be extremely careful as the env variables defined here are accessible by all the actions of the workflow.
# For critical env variable, declare it within the action.
env:
  node-version: 16.x
  INSEE_CLIENT_ID: ${{ secrets.INSEE_CLIENT_ID }}
  INSEE_CLIENT_SECRET: ${{ secrets.INSEE_CLIENT_SECRET}}
  INSEE_CLIENT_ID_FALLBACK: ${{ secrets.INSEE_CLIENT_ID_FALLBACK }}
  INSEE_CLIENT_SECRET_FALLBACK: ${{ secrets.INSEE_CLIENT_SECRET_FALLBACK}}
  PDF_DOWNLOAD_DIRECTORY: /tmp/download
  PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
  REDIS_URL: redis://127.0.0.1:6379
  MONCOMPTEPRO_CLIENT_ID: ${{ secrets.MONCOMPTEPRO_CLIENT_ID }}
  MONCOMPTEPRO_CLIENT_SECRET: ${{ secrets.MONCOMPTEPRO_CLIENT_SECRET }}
  MONCOMPTEPRO_URL: ${{ secrets.MONCOMPTEPRO_URL }}
  MONCOMPTEPRO_REDIRECT_URI: ${{ secrets.MONCOMPTEPRO_REDIRECT_URI }}
  MONCOMPTEPRO_POST_LOGOUT_REDIRECT_URI: ${{ secrets.MONCOMPTEPRO_POST_LOGOUT_REDIRECT_URI }}
  IRON_SESSION_PWD: ${{ secrets.IRON_SESSION_PWD }}

jobs:
  dependencies:
    name: 'Install dependencies'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Cache node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          # Cache node_modules. To cache global, you may try ~/.npm
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm i

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [dependencies]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Run linter
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [dependencies]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Build site
        run: npm run build
      - name: Cache site
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [dependencies]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Run unit tests
        run: |
          npm run test:unit

  # a11y:
  #   name: A11y tests
  #   runs-on: ubuntu-latest
  #   needs: [build]

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Load cached build
  #       uses: actions/cache@v3
  #       id: restore-build
  #       with:
  #         path: ./*
  #         key: ${{ github.sha }}

  #     - name: Install redis
  #       run: sudo apt-get install -y redis-tools redis-server

  #     - run: npm run start &
  #       env:
  #         PORT: 3000

  #     # wait for the server to start responding. We expect Bad Request 400 once it starts listening.
  #     # so override the shell and have the last command be the : { null } command to force exit code 0.
  #     - run: wget --retry-connrefused --waitretry=5 --read-timeout=10 --timeout=15 -t 50 http://localhost:3000/comment-ca-marche

  #     - run: |
  #         npm install -g @axe-core/cli
  #         axe http://localhost:3000  http://localhost:3000/donnees-extrait-kbis  http://localhost:3000/comment-ca-marche  http://localhost:3000/rechercher  http://localhost:3000/faq  http://localhost:3000/accessiblite  http://localhost:3000/vie-privee  http://localhost:3000/entreprise/880878145  http://localhost:3000/justificatif/880878145  http://localhost:3000/annonces/880878145  http://localhost:3000/administration/insee http://localhost:3000/administration http://localhost:3000/sources-de-donnees/insee  http://localhost:3000/sources-de-donnees/  http://localhost:3000/carte  http://localhost:3000/etablissement/88087814500015  http://localhost:3000/rechercher?terme=ganymede  --disable scrollable-region-focusable,region,color-contrast,duplicate-id --exit

  prepare:
    needs: build
    runs-on: ubuntu-latest
    # explicitly set the output of this job
    # so that other jobs can use it
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      # generate the list using a bash script
      - name: Create matrix âŠ¹
        id: prepare
        # for reusable workflow, must use the full action reference
        uses: bahmutov/gh-build-matrix@main
        with:
          n: 12 # number of containers to output

      - name: Print result ðŸ–¨
        run: echo '${{ steps.prepare.outputs.matrix }}'

  testE2E:
    needs: prepare
    name: End2end tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v3

      - name: Load cached build
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Print GitHub strategy context ðŸ–¨
        run: echo '${{ toJSON(strategy) }}'

      - name: Run split Cypress tests ðŸ§ª
        # https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          record: false
          browser: chrome
        env:
          PORT: 3000
          SPLIT: ${{ strategy.job-total }}
          SPLIT_INDEX: ${{ strategy.job-index }}
          DEBUG: cypress-split
