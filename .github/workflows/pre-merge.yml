# This workflow will do a clean install of node dependencies, build the source code and run tests

name: 'Pre-merge checks'

on:
  pull_request:
    branches: [main]

# Be extremely careful as the env variables defined here are accessible by all the actions of the workflow.
# For critical env variable, declare it within the action.
env:
  node-version: 18.x
  INSEE_CLIENT_ID: ${{ secrets.INSEE_CLIENT_ID }}
  INSEE_CLIENT_SECRET: ${{ secrets.INSEE_CLIENT_SECRET}}
  INSEE_CLIENT_ID_FALLBACK: ${{ secrets.INSEE_CLIENT_ID_FALLBACK }}
  INSEE_CLIENT_SECRET_FALLBACK: ${{ secrets.INSEE_CLIENT_SECRET_FALLBACK}}
  END2END_MOCKING: enabled
  INSEE_ENABLED: enabled
  INDEXING_ENABLED: enabled
  PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
  REDIS_URL: redis://127.0.0.1:6379
  MONCOMPTEPRO_CLIENT_ID: ${{ secrets.MONCOMPTEPRO_CLIENT_ID }}
  MONCOMPTEPRO_CLIENT_SECRET: ${{ secrets.MONCOMPTEPRO_CLIENT_SECRET }}
  MONCOMPTEPRO_URL: ${{ secrets.MONCOMPTEPRO_URL }}
  MONCOMPTEPRO_REDIRECT_URI: ${{ secrets.MONCOMPTEPRO_REDIRECT_URI }}
  MONCOMPTEPRO_POST_LOGOUT_REDIRECT_URI: ${{ secrets.MONCOMPTEPRO_POST_LOGOUT_REDIRECT_URI }}
  IRON_SESSION_PWD: ${{ secrets.IRON_SESSION_PWD }}

jobs:
  dependencies:
    name: 'Install dependencies'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Cache node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          # Cache node_modules. To cache global, you may try ~/.npm
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm i

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [dependencies]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Run linter
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [dependencies]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Build site
        run: npm run build
        env:
          END2END_MOCKING: enabled
      - name: Cache site
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [dependencies]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node modules
        uses: actions/cache@v3
        id: restore-dependencies
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Run unit tests
        run: |
          npm run test:unit

  testE2E:
    name: End2end tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v3

      - name: Load cached build
        uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Run Cypress tests ðŸ§ª
        # https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v5
        timeout-minutes: 10
        with:
          start: npm start
          record: false
        env:
          PORT: 3000
          END2END_MOCKING: enabled
