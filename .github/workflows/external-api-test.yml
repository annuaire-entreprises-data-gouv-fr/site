# This workflow will check if no regression is introduced in externals API

name: 'External API check'

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
  # Check every day at 3:00 AM
  schedule:
    - cron: '0 3 * * *'

# Be extremely careful as the env variables defined here are accessible by all the actions of the workflow.
# For critical env variable, declare it within the action.
env:
  node-version: 18.x
  INSEE_CLIENT_ID: ${{ secrets.INSEE_CLIENT_ID }}
  INSEE_CLIENT_SECRET: ${{ secrets.INSEE_CLIENT_SECRET}}
  INSEE_CLIENT_ID_FALLBACK: ${{ secrets.INSEE_CLIENT_ID_FALLBACK }}
  INSEE_CLIENT_SECRET_FALLBACK: ${{ secrets.INSEE_CLIENT_SECRET_FALLBACK}}
  NEXT_PUBLIC_END2END_MOCKING: disabled
  INSEE_ENABLED: enabled
  INDEXING_ENABLED: enabled
  REDIS_ENABLED: disabled
  PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
  MONCOMPTEPRO_CLIENT_ID: ${{ secrets.MONCOMPTEPRO_CLIENT_ID }}
  MONCOMPTEPRO_CLIENT_SECRET: ${{ secrets.MONCOMPTEPRO_CLIENT_SECRET }}
  MONCOMPTEPRO_URL: ${{ secrets.MONCOMPTEPRO_URL }}
  MONCOMPTEPRO_REDIRECT_URI: ${{ secrets.MONCOMPTEPRO_REDIRECT_URI }}
  MONCOMPTEPRO_POST_LOGOUT_REDIRECT_URI: ${{ secrets.MONCOMPTEPRO_POST_LOGOUT_REDIRECT_URI }}
  IRON_SESSION_PWD: ${{ secrets.IRON_SESSION_PWD }}

jobs:
  dependencies:
    name: 'Install dependencies'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - uses: ./.github/actions/install-dependencies
        name: Install and cache dependencies

  testExternalAPIs:
    name: Test externals API
    runs-on: ubuntu-latest
    needs: [dependencies]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Load node_modules
        uses: ./.github/actions/load-dependencies

      - name: Run API client unit tests
        run: |
          npm run test:api-clients -- --runInBand --testTimeout=60000 --silent

      - name: '[IF FAIL] Manual action required (read below)'
        if: ${{ failure() }}
        run: |
          echo "The API client tests failed.

          We tests external APIs, and ensure there is no regression compared to 
          previous successful runs stored in snapshots.

          If the test failed, it means that the response returned by the API client
          is not the same as the one stored in the snapshot. 

          You need to analyse the diff in the logs of the job to decide what to do :

          - If the changes concerns only the data, and not the model (eg. company name changed), 
            you need to update the snapshot locally by running the following command :

            npm run test:api-clients -- -u

          - If the changes concerns the model (eg. API changed, missing field, type of data),
            you need to check if it is a breaking change, and correct the code if is.
            When the code is fixed, you can update the snapshot locally.
            
            
          If there is no diff, it probably means that the API is down. You need to check if 
          there is an incident reported on the APIs status page :

          https://annuaire-entreprises.data.gouv.fr/donnees/api

          If there is no incident, you can try to run the tests again.
          "
      - name: Notify API failure to team
        if: ${{ github.event_name == 'schedule' && failure()}}
        uses: ./.github/actions/notify
        with:
          message: 'ðŸš¨ API client tests failed ({{ github.event.repository.html_url }}/actions/runs/{{ github.run_id }})'
          hook: ${{ secrets.TCHAP_HOOK }}
          id: ${{ secrets.TCHAP_ROOM_ID }}
